// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindSensorAvgBySensorIDAndDayHandlerFunc turns a function with the right signature into a find sensor avg by sensor id and day handler
type FindSensorAvgBySensorIDAndDayHandlerFunc func(FindSensorAvgBySensorIDAndDayParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindSensorAvgBySensorIDAndDayHandlerFunc) Handle(params FindSensorAvgBySensorIDAndDayParams) middleware.Responder {
	return fn(params)
}

// FindSensorAvgBySensorIDAndDayHandler interface for that can handle valid find sensor avg by sensor id and day params
type FindSensorAvgBySensorIDAndDayHandler interface {
	Handle(FindSensorAvgBySensorIDAndDayParams) middleware.Responder
}

// NewFindSensorAvgBySensorIDAndDay creates a new http.Handler for the find sensor avg by sensor id and day operation
func NewFindSensorAvgBySensorIDAndDay(ctx *middleware.Context, handler FindSensorAvgBySensorIDAndDayHandler) *FindSensorAvgBySensorIDAndDay {
	return &FindSensorAvgBySensorIDAndDay{Context: ctx, Handler: handler}
}

/*FindSensorAvgBySensorIDAndDay swagger:route GET /sensor/{id}/values/day/{day} findSensorAvgBySensorIdAndDay

Find a daily summary of hour based aggregates

*/
type FindSensorAvgBySensorIDAndDay struct {
	Context *middleware.Context
	Handler FindSensorAvgBySensorIDAndDayHandler
}

func (o *FindSensorAvgBySensorIDAndDay) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindSensorAvgBySensorIDAndDayParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
