// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewFindSensorAvgBySensorIDAndDayParams creates a new FindSensorAvgBySensorIDAndDayParams object
// no default values defined in spec.
func NewFindSensorAvgBySensorIDAndDayParams() FindSensorAvgBySensorIDAndDayParams {

	return FindSensorAvgBySensorIDAndDayParams{}
}

// FindSensorAvgBySensorIDAndDayParams contains all the bound params for the find sensor avg by sensor id and day operation
// typically these are obtained from a http.Request
//
// swagger:parameters find sensor avg by sensor id and day
type FindSensorAvgBySensorIDAndDayParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*average on a day
	  Required: true
	  In: path
	*/
	Day strfmt.Date
	/*ID of a sensor to fetch
	  Required: true
	  In: path
	*/
	ID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindSensorAvgBySensorIDAndDayParams() beforehand.
func (o *FindSensorAvgBySensorIDAndDayParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rDay, rhkDay, _ := route.Params.GetOK("day")
	if err := o.bindDay(rDay, rhkDay, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDay binds and validates parameter Day from path.
func (o *FindSensorAvgBySensorIDAndDayParams) bindDay(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("day", "path", "strfmt.Date", raw)
	}
	o.Day = *(value.(*strfmt.Date))

	if err := o.validateDay(formats); err != nil {
		return err
	}

	return nil
}

// validateDay carries on validations for parameter Day
func (o *FindSensorAvgBySensorIDAndDayParams) validateDay(formats strfmt.Registry) error {

	if err := validate.FormatOf("day", "path", "date", o.Day.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *FindSensorAvgBySensorIDAndDayParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("id", "path", "strfmt.UUID", raw)
	}
	o.ID = *(value.(*strfmt.UUID))

	if err := o.validateID(formats); err != nil {
		return err
	}

	return nil
}

// validateID carries on validations for parameter ID
func (o *FindSensorAvgBySensorIDAndDayParams) validateID(formats strfmt.Registry) error {

	if err := validate.FormatOf("id", "path", "uuid", o.ID.String(), formats); err != nil {
		return err
	}
	return nil
}
