// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/scylladb/scylla-code-samples/iot-care-pet-example/go/cmd/server/models"
)

// FindSensorDataBySensorIDAndTimeRangeOKCode is the HTTP code returned for type FindSensorDataBySensorIDAndTimeRangeOK
const FindSensorDataBySensorIDAndTimeRangeOKCode int = 200

/*FindSensorDataBySensorIDAndTimeRangeOK sensors response

swagger:response findSensorDataBySensorIdAndTimeRangeOK
*/
type FindSensorDataBySensorIDAndTimeRangeOK struct {

	/*
	  In: Body
	*/
	Payload []float32 `json:"body,omitempty"`
}

// NewFindSensorDataBySensorIDAndTimeRangeOK creates FindSensorDataBySensorIDAndTimeRangeOK with default headers values
func NewFindSensorDataBySensorIDAndTimeRangeOK() *FindSensorDataBySensorIDAndTimeRangeOK {

	return &FindSensorDataBySensorIDAndTimeRangeOK{}
}

// WithPayload adds the payload to the find sensor data by sensor Id and time range o k response
func (o *FindSensorDataBySensorIDAndTimeRangeOK) WithPayload(payload []float32) *FindSensorDataBySensorIDAndTimeRangeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find sensor data by sensor Id and time range o k response
func (o *FindSensorDataBySensorIDAndTimeRangeOK) SetPayload(payload []float32) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindSensorDataBySensorIDAndTimeRangeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]float32, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*FindSensorDataBySensorIDAndTimeRangeDefault error

swagger:response findSensorDataBySensorIdAndTimeRangeDefault
*/
type FindSensorDataBySensorIDAndTimeRangeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFindSensorDataBySensorIDAndTimeRangeDefault creates FindSensorDataBySensorIDAndTimeRangeDefault with default headers values
func NewFindSensorDataBySensorIDAndTimeRangeDefault(code int) *FindSensorDataBySensorIDAndTimeRangeDefault {
	if code <= 0 {
		code = 500
	}

	return &FindSensorDataBySensorIDAndTimeRangeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the find sensor data by sensor id and time range default response
func (o *FindSensorDataBySensorIDAndTimeRangeDefault) WithStatusCode(code int) *FindSensorDataBySensorIDAndTimeRangeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the find sensor data by sensor id and time range default response
func (o *FindSensorDataBySensorIDAndTimeRangeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the find sensor data by sensor id and time range default response
func (o *FindSensorDataBySensorIDAndTimeRangeDefault) WithPayload(payload *models.Error) *FindSensorDataBySensorIDAndTimeRangeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find sensor data by sensor id and time range default response
func (o *FindSensorDataBySensorIDAndTimeRangeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindSensorDataBySensorIDAndTimeRangeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
