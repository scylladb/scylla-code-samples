// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	FindOwnerByID(params *FindOwnerByIDParams) (*FindOwnerByIDOK, error)

	FindPetsByOwnerID(params *FindPetsByOwnerIDParams) (*FindPetsByOwnerIDOK, error)

	FindSensorAvgBySensorIDAndDay(params *FindSensorAvgBySensorIDAndDayParams) (*FindSensorAvgBySensorIDAndDayOK, error)

	FindSensorDataBySensorIDAndTimeRange(params *FindSensorDataBySensorIDAndTimeRangeParams) (*FindSensorDataBySensorIDAndTimeRangeOK, error)

	FindSensorsByPetID(params *FindSensorsByPetIDParams) (*FindSensorsByPetIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FindOwnerByID Find an owner with a specific ID
*/
func (a *Client) FindOwnerByID(params *FindOwnerByIDParams) (*FindOwnerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOwnerByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "find owner by id",
		Method:             "GET",
		PathPattern:        "/owner/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindOwnerByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOwnerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindOwnerByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindPetsByOwnerID Find the Pets that the owner tracks
*/
func (a *Client) FindPetsByOwnerID(params *FindPetsByOwnerIDParams) (*FindPetsByOwnerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPetsByOwnerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "find pets by owner id",
		Method:             "GET",
		PathPattern:        "/owner/{id}/pets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindPetsByOwnerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPetsByOwnerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindPetsByOwnerIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindSensorAvgBySensorIDAndDay Find a daily summary of hour based aggregates
*/
func (a *Client) FindSensorAvgBySensorIDAndDay(params *FindSensorAvgBySensorIDAndDayParams) (*FindSensorAvgBySensorIDAndDayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSensorAvgBySensorIDAndDayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "find sensor avg by sensor id and day",
		Method:             "GET",
		PathPattern:        "/sensor/{id}/{p}/values/day/{day}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSensorAvgBySensorIDAndDayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSensorAvgBySensorIDAndDayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindSensorAvgBySensorIDAndDayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindSensorDataBySensorIDAndTimeRange Read sensor data
*/
func (a *Client) FindSensorDataBySensorIDAndTimeRange(params *FindSensorDataBySensorIDAndTimeRangeParams) (*FindSensorDataBySensorIDAndTimeRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSensorDataBySensorIDAndTimeRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "find sensor data by sensor id and time range",
		Method:             "GET",
		PathPattern:        "/sensor/{id}/{p}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSensorDataBySensorIDAndTimeRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSensorDataBySensorIDAndTimeRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindSensorDataBySensorIDAndTimeRangeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindSensorsByPetID Find the Pet sensors
*/
func (a *Client) FindSensorsByPetID(params *FindSensorsByPetIDParams) (*FindSensorsByPetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSensorsByPetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "find sensors by pet id",
		Method:             "GET",
		PathPattern:        "/pet/{id}/sensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSensorsByPetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSensorsByPetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindSensorsByPetIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
