// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/scylladb/scylla-code-samples/iot-care-pet-example/go/cmd/server/models"
)

// FindSensorAvgBySensorIDAndDayReader is a Reader for the FindSensorAvgBySensorIDAndDay structure.
type FindSensorAvgBySensorIDAndDayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindSensorAvgBySensorIDAndDayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindSensorAvgBySensorIDAndDayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFindSensorAvgBySensorIDAndDayDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindSensorAvgBySensorIDAndDayOK creates a FindSensorAvgBySensorIDAndDayOK with default headers values
func NewFindSensorAvgBySensorIDAndDayOK() *FindSensorAvgBySensorIDAndDayOK {
	return &FindSensorAvgBySensorIDAndDayOK{}
}

/*FindSensorAvgBySensorIDAndDayOK handles this case with default header values.

sensor avg response
*/
type FindSensorAvgBySensorIDAndDayOK struct {
	Payload []*models.SensorAvg
}

func (o *FindSensorAvgBySensorIDAndDayOK) Error() string {
	return fmt.Sprintf("[GET /sensor/{id}/{p}/values/day/{day}][%d] findSensorAvgBySensorIdAndDayOK  %+v", 200, o.Payload)
}

func (o *FindSensorAvgBySensorIDAndDayOK) GetPayload() []*models.SensorAvg {
	return o.Payload
}

func (o *FindSensorAvgBySensorIDAndDayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSensorAvgBySensorIDAndDayDefault creates a FindSensorAvgBySensorIDAndDayDefault with default headers values
func NewFindSensorAvgBySensorIDAndDayDefault(code int) *FindSensorAvgBySensorIDAndDayDefault {
	return &FindSensorAvgBySensorIDAndDayDefault{
		_statusCode: code,
	}
}

/*FindSensorAvgBySensorIDAndDayDefault handles this case with default header values.

error
*/
type FindSensorAvgBySensorIDAndDayDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the find sensor avg by sensor id and day default response
func (o *FindSensorAvgBySensorIDAndDayDefault) Code() int {
	return o._statusCode
}

func (o *FindSensorAvgBySensorIDAndDayDefault) Error() string {
	return fmt.Sprintf("[GET /sensor/{id}/{p}/values/day/{day}][%d] find sensor avg by sensor id and day default  %+v", o._statusCode, o.Payload)
}

func (o *FindSensorAvgBySensorIDAndDayDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *FindSensorAvgBySensorIDAndDayDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
